#!/usr/bin/ash


# $root (or /@root) will be where all the system files are stored once you've made
# a snapshot to /@root (via the 'create @root snapshot from /' option.)
# At that point you'll be able to delete all the files in your original / directory
# (with the exception of .snapshots and @root) by issuing the 'delete root system'
# option in the menu.


snapshot_dir_subvolume='@/.snapshots'
snapshot_dir='/.snapshots'
prefix='@'
cur_root="/"		# Current root or default snapshot (ex., /.snapshots/1/snapshot)
bak_root="/@backup"
mountOpts='noatime'
new_root=/new_root
user=user
mnt=/mnt
temp="$mnt/temp"			# Used for changing from ro to rw
squashPath='/'
squashFile='root.squashfs'
efiPartNum='1'			# What partition is efi on? (leave blank to not mount)
bootPartNum=''		# What partition is boot on? (leave blank to not mount)

# Useful file: /usr/lib/initcpio/init

overlayFlag=false
tmpfsFlag=false
squashfsFlag=false
rorwFlag=false


boot() {

	[ "$rorwFlag" = 'true' ] && create_rorw "$1"

	# Check if the boot directory contains a bootable system (assume working system has /etc)
	if [ -d "$mnt$1/etc" ]; then
			
		echo -e "Booting $1...\n"

		if [ $tmpfsFlag = 'true' ]; then
			echo create_tmpfs "$1"
			create_tmpfs "$1"
		else
			mount --bind -o "$mountOpts" "$mnt$1" ${new_root}
		fi
	
		[ $overlayFlag = 'true' ] && create_overlay
	
		#mount --mkdir --bind -o "$mountOpts" "$mnt$snapshot_dir" "$new_root$snapshot_dir"
	
		finished=true
		
	else

		error "No system found at $1."
		showMenu=true		
	fi

}

create_rorw() {

	echo "Creating ro to rw snapshot..."

	bcachefs subvolume snapshot "$mnt$1" "$temp"
	bcachefs subvolume delete "$mnt$1"
	bcachefs subvolume snapshot "$temp" "$mnt$1"
	bcachefs subvolume delete "$temp"

}

create_overlay() {

   echo -e "Booting in overlay mode...\n"

   local lower_dir=$(mktemp -d -p /)
   local ram_dir=$(mktemp -d -p /)
   mount --move ${new_root} ${lower_dir}
   mount -t tmpfs cowspace ${ram_dir}
   mkdir -p ${ram_dir}/upper ${ram_dir}/work
   mount -t overlay -o lowerdir=${lower_dir},upperdir=${ram_dir}/upper,workdir=${ram_dir}/work rootfs ${new_root}

}

create_tmpfs() {

	mount -t tmpfs -o size=80% none $new_root

	echo -e "\nCopying root filesystem to RAM. Please be patient...\n"

	rsync --info=progress2 -axHAXSW --exclude=/efi/ --exclude=/boot/ --exclude=/home/user/.cache/ --exclude=setup.tar.gz --exclude /home/user/.local/share/Trash/ --exclude=/dev/ --exclude=/var/cache/pacman/ --exclude=/run/timeshift/ --exclude=/proc/ --exclude=/sys/ --exclude=/tmp/ --exclude=/run/ --exclude=/mnt/ --exclude=$snapshot_dir/* --exclude=/var/tmp/ --exclude=/var/log/ --exclude=/var/lib/systemd/random-seed --exclude=/root/.cache/* "$mnt$1/" ${new_root}

}

error() {

	echo -e "\n<<< $1 >>>\n"

}

mount_cur_root() {

	cd /
	mkdir -p $mnt
	[ "$(ls $mnt)" ] && umount -r $mnt
	
	mount "$root_part" $mnt
	mount -o "$mountOpts,subvol=$snapshot_dir_subvolume" "$root_part" "$mnt$snapshot_dir"

}

mount_main_root() {

	cd /
	[ "$(ls $mnt)" ] && umount -r $mnt
	mount -o "$mountOpts,subvol=/" "$root_part" "$mnt"

}

run_latehook() {
	
	echo -e "\nPress any key for btrfs rollback."
	
	read -sn1 -t 2 || return
	
	#showMenu=true

	# Automatically find the proper root partition which was booted
	root_part=$(mount | grep ${new_root} | sed "s# on ${new_root}.*##")
	disk=$(mount | grep ${new_root} | sed "s#[0-9] on ${new_root}.*##")

	cur_root="$(btrfs su get-default $new_root | sed 's/ID.*path @//')"

	# System pre-mounted, but we want to mount the systems differently
	umount ${new_root}


	mount_cur_root

	finished=false

	while [ ! "$finished" = 'true' ]; do

		#if [ $showMenu = 'true' ]; then
			
		echo -e "\n\nWhat would you like to do?

<s> boot into a snapshot
<r> restore snapshot
<R> restore snapshot (uses mv)
<u> restore snapshot (uses rysnc)
<n> create $bak_root from default
<b> boot $bak_root
<d> delete root system
<z> create squashfs
<x> run squashfs
<y> restore squashfs
<c> boot custom dir
<e> enter bash
<f> fsck
<q> quit

<w> add ro -> rw flag
<o> add overlay flag
<t> add tmpfs flag
<m> add custom mount opts (Not working)

<ENTER> boot default: $cur_root\n\n"

		read -sn 1 key

		#fi


		if [[ "$key" = 'u' ]]; then
		
			echo -e "\nEnter a source.
(eg., '/', '/@root', '/.snapshots/first')\n"

			read Source
	
			echo -e "\nEnter a target.
(eg., '/', '/@root', '/.snapshots/first')\n"

			read Target

			mkdir -p "$mnt$Target"

			rsync_params="-axHAXSW --del --exclude=/lost+found/ --exclude=/dev/ --exclude=/proc/ --exclude=/sys/ --exclude=/tmp/ --exclude=/run/ --exclude=/var/tmp/ --exclude=/var/lib/dhcpcd/ --exclude=/var/log/ --exclude=/var/lib/systemd/random-seed --exclude=/root/.cache/ --exclude=/boot/ --exclude=/efi/ --exclude=/media/ --exclude=/mnt/ --exclude=/home/$user/.cache/ --exclude=/home/$user/.local/share/Trash/ --exclude=$mnt/ --exclude=$snapshot_dir/"


			rsync --dry-run -v $rsync_params "$mnt$Source" "$mnt$Target" | less


   		read -p "Type 'y' to proceed with rsync or any other key to exit..." choice

   		if [[ $choice = 'y' ]]; then

      		rsync --info=progress2 $rsync_params "$mnt$Source" "$mnt$Target"
				
				echo "Sync finished."
   		
			else
      		echo "Exiting."
   		fi

		elif [[ "$key" = 'f' ]]; then
			
			echo 'To save logs run: bcachefs fsck -p > $mnt/log_file.txt 2>&1'
			echo bcachefs fsck -p ${root_part}
			bcachefs fsck -p ${root_part}
			
		elif [[ "$key" = 'z' ]]; then
			
			echo -e "\nEnter a source to create from.
(eg., '/', '/.snapshots/initial', '/.snapshots/1/snapshot')\n"

			read squashSource

			[ $efiPartNum ] && mount --mkdir $disk$efiPartNum $mnt/efi
			[ $bootPartNum ] && mount --mkdir $disk$bootPartNum $mnt/boot
			
			cd $mnt$squashSource

			mksquashfs . $mnt$squashPath$squashFile -noappend -no-recovery -mem-percent 20 -comp lz4 -e root.squashfs -e "$squashFile" -e home/$user/.cache/ -e home/$user/.local/share/Trash/ -e mnt/ -e var/cache/pacman/ -e .snapshots/*

			[ $efiPartNum ] && umount $mnt/efi
			[ $bootPartNum ] && umount $mnt/boot

			sleep 1

   		ls -lah $mnt$squashPath$squashFile
		
		elif [[ "$key" = 'x' ]]; then

			if [ $tmpfsFlag = 'true' ]; then
				
				echo -e "\nExtracting archive to RAM. Please be patient...\n"
				mount -t tmpfs -o size=80% none $new_root
				unsquashfs -d $new_root -f $mnt$squashPath$squashFile
			
			elif [ $overlayFlag = 'true' ]; then

				mount -t squashfs -o loop --source "$mnt$squashPath$squashFile" --target "$new_root/"
				create_overlay
			
			else
				
				mount -t squashfs -o loop --source "$mnt$squashPath$squashFile" --target "$new_root/"

			fi
	
			mount --mkdir --bind -o "$mountOpts" "$mnt$snapshot_dir" "$new_root$snapshot_dir"

			finished=true

		elif [[ "$key" = 'y' ]]; then
			
			ls ${mnt} "$mnt$snapshot_dir"

			echo -e "\nType the path you'd like to restore.\n"

			read restorePath
			
			mount -t squashfs -o loop --source "$mnt$squashPath$squashFile" --target "$new_root"
		
			if [ "$mnt$restorePath" = "$cur_root" ] && [ -d "$mnt$restorePath" ]; then
				echo "Deleting subvolume in current path..."
				bcachefs subvolume delete "$mnt$restorePath"
				rm -rf "$mnt$restorePath"
			fi
			
			mkdir -p "$mnt$restorePath"
			echo -e "\nCopying:  cp -a . $mnt$restorePath/... Please be patient.\n"
			
			cd "$new_root"
			cp -a . "$mnt$restorePath/"

			cd /
			umount "$new_root"
			
			echo "All done"

		elif [[ "$key" = 'o' ]]; then
	
			[ $overlayFlag = 'true' ] && overlayFlag='false' || overlayFlag='true'
			
			echo "overlayFlag=$overlayFlag"

		elif [[ "$key" = 'w' ]]; then
			
			[ $rorwFlag = 'true' ] && rorwFlag='false' || rorwFlag='true'
			
			echo "rorwFlag=$rorwFlag"

		elif [[ "$key" = 't' ]]; then
			
			[ $tmpfsFlag = 'true' ] && tmpfsFlag='false' || tmpfsFlag='true'
			
			echo "tmpfsFlag=$tmpfsFlag"
	
		elif [[ "$key" = 'm' ]]; then
		
			echo "FEATURE NOT CURRENTLY WORKING! (likely due to /etc/fstab overriding?)"
			
			echo -e "\nType mount opts to add (will override current: $mountOpts):\n"

			read mountOpts

			echo -e "\nMounting options '$mountOpts' were added.\n"
	

		elif [[ "$key" = 'c' ]]; then
			
			echo -e "\nType the path you'd like to boot from.\n"

			read bootPath
		
			boot "$bootPath"

		elif [[ "$key" = 's' ]]; then
	
			echo -e "\nType the name of the snapshot you would like to load.\n"

			# TODO: create a way to easily select snapshots instead of having to enter them
		
			ls "$mnt$snapshot_dir"

			echo

			read snapshot
			
			snapshot="$snapshot/snapshot"
			boot "$snapshot_dir/$snapshot"

		elif [[ "$key" = 'n' ]]; then
	
			cd /
			
			if [ -d "$mnt$cur_root/etc" ]; then
				
				mount_main_root
				
				if [ -d "$mnt$bak_root" ]; then
					echo -e "\n$bak_root found. Deleting and replacing...\n"
					btrfs su delete $mnt$bak_root
				fi
				
				btrfs su snapshot "$mnt/$prefix$cur_root" "$mnt$bak_root" && echo "$bak_root snapshot created."	
				
				if [ $efiPartNum ]; then
					
					mount --mkdir $disk$efiPartNum $temp/efi
					echo "cp -ar $temp/* $mnt$bak_root/"
					cp -ar $temp/* "$mnt$bak_root/" && echo "/efi copied!"
					umount $temp/efi
				
				fi

				if [ $bootPartNum ]; then
					mount --mkdir $disk$bootPartNum $temp/$prefix$cur_root/boot
					umount $temp/$prefix$cur_root/boot
				else
					echo "cp -ar $mnt/$prefix/boot/grub/* $mnt$bak_root/boot/grub/"
					cp -ar $mnt/$prefix/boot/grub/* "$mnt$bak_root/boot/grub/" && echo "/boot/grub copied!"

					bash	
				fi
	
				mount_cur_root

			else

				error "No system found at $cur_root."
	
			fi




		elif [[ "$key" = 'b' ]]; then
			
			cd /
			
			umount -r /mnt
			
			mount -o "$mountOpts,subvol=/" "$root_part" "$mnt/"

			boot "$bak_root"

		elif [[ "$key" = 'R' ]]; then

			echo -e "\nType the name of the snapshot you would like to recover to $cur_root.\n"
		
			ls "$mnt$snapshot_dir"

			echo

			read snapshot
	
			if [ -d "$mnt$snapshot_dir/$snapshot" ]; then
			
				if [ -d "$mnt$cur_root" ]; then
					bcachefs subvolume delete $mnt$cur_root
					sleep 1
					sync
					sleep 1
				fi

				mv "$mnt$snapshot_dir/$snapshot/" $mnt$cur_root/
				echo -e "\n'$snapshot' recovered to $cur_root.\n"
					
			else
			
				error "The snapshot '$snapshot' does not exist."

			fi

		elif [[ "$key" = 'r' ]]; then

			echo -e "\nType the name of the snapshot you would like to recover to $cur_root.\n"
		
			ls "$mnt$snapshot_dir"

			echo

			read snapshot
	
			if [ -d "$mnt$snapshot_dir/$snapshot" ]; then
			
				if [ -d "$mnt$snapshot_dir$root-old" ]; then
					bcachefs subvolume delete "$mnt$snapshot_dir$root-old"
				fi

				if [ -d "$mnt$cur_root" ]; then
					bcachefs subvolume snapshot "$mnt$cur_root" "$mnt$snapshot_dir$root-old"
					bcachefs subvolume delete $mnt$cur_root
				fi

				echo bcaches subvolume snapshot "$mnt$snapshot_dir/$snapshot" $mnt$cur_root
				bcachefs subvolume snapshot "$mnt$snapshot_dir/$snapshot" $mnt$cur_root
				echo -e "\n'$snapshot' recovered to $cur_root.\n"
					
			else
			
				error "The snapshot '$snapshot' does not exist."

			fi

		elif [[ "$key" = 'e' ]]; then

			echo "Entering bash..."
			bash
	
		elif [[ "$key" = 'd' ]]; then
	
			# Make sure there is a system at @root before proceeding
			# You must keep .snapshots and @root in / or the system won't start
			if [ -d $mnt$cur_root/etc ]; then

				echo "Deleting / (excepting .snapshots and $cur_root)..."
			
				rm -rf /mnt/bin /mnt/boot /mnt/dev /mnt/efi /mnt/etc /mnt/home /mnt/lib /mnt/lib64 /mnt/'lost+found' /mnt/opt /mnt/proc /mnt/root /mnt/run /mnt/sbin /mnt/srv /mnt/sys /mnt/tmp /mnt/usr /mnt/var
			
			else
			
				error "No system located at $cur_root. Will not delete main system."
		
			fi

		elif [[ "$key" = '' ]]; then  # ie., <ENTER> was pressed
			
			boot "$cur_root"

		elif [[ "$key" = 'q' ]]; then

			echo "Exiting."
			finished=true

			sleep 1
		
		else

			error "Not an known option ($key). Please try again."

		fi

	done
	
	sleep 1

}
